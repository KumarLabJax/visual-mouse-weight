#!/usr/bin/env python3

"""
Created 7/11/2022

@author: Malachy Guzman

This code takes moments data generated by master_pixel_analysis and 
calculates linear fit and R^2 for each metric vs seg area. 
"""

import ReadNPYAppend as r
import numpy as np
import pandas as pd
import imageio
import cv2
import os
import sys, time, csv, argparse
from scipy import stats


def overall_med_metric_comparison(df, metric):
    x = df["seg_area"]
    y = df[metric]
    stat_df = pd.DataFrame([x,y]).T
    
    # Cleaning out na values
    stat_df = stat_df.dropna()
    stat_df = stat_df.reset_index(drop = True)

    #Produce the line equation and R^2 value for each area vs metric plot
    res = stats.linregress(stat_df)
    info = [round(res.slope,4), round(res.intercept,4), round(res.rvalue**2,4)]

    return info



def main(): 
        #This is the moments csv, not video
        filename = sys.argv[1]
        print("\n")
        print("Loaded " + filename.replace("code/",""))

        metric_list = ["v_mag", "eccentricity", "elongation", "aspect_w/l", "circularity", "rectangular"]
        important_moment_df = pd.read_csv(filename, encoding = 'utf-8')
        comparison_df = pd.DataFrame()

        fulltime_start = time.time()

        #Doing linear fit and R^2
        for i in metric_list:
            comparison_df = comparison_df.append(pd.DataFrame(overall_med_metric_comparison(important_moment_df, i)).T, ignore_index=True)
            
        comparison_df.columns = ['slope', 'intercept', 'r_sq']
        comparison_df.index = metric_list

        # Calculates processing time
        fulltime_end = time.time()
        processtime = fulltime_end-fulltime_start #in seconds
        print("Took " + str(processtime) + " sec to do calculations.") #in s
        
        #Write dataframe to csv
        savename = filename.replace("code/","")
        savename = savename.replace(".avi.csv","")
        comparison_df.to_csv(savename + "_moment_stats.csv")
        print('Done: exported moment analysis to csv')
        print("\n")
    


if __name__ == "__main__":
    main()